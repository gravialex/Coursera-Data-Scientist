11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validNames = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validNames) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
head(rankall("heart attack", 20), 10)
rankall("heart attack", 20)
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validNames = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validNames) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validNames = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validNames) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
}
head(rankall("heart attack", 20), 10)
rankall("heart attack", 20)
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
#   validNames = c("heart attack","heart failure","pneumonia")
#   if (!outcome %in% validNames) { stop("invalid outcome")}
#   validState = unique(data[,7])
#   if (!state %in% validState) stop("invalid state")
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankall("heart attack", 20)
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
#   validNames = c("heart attack","heart failure","pneumonia")
#   if (!outcome %in% validNames) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankall("heart attack", 20)
rankhospital("MN", "heart attack", 5000)
rankhospital("MN", "heart attack", 5000)
rankall("heart attack")
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankall("heart attack")
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
validNames = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validNames) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankall("heart attack")
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that outcome is valid
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankall("heart attack")
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
validNames = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validNames) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankall("heart attack")
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that outcome is valid
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankall("heart attack")
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
validNames = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validNames) { stop("invalid outcome")}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankall("heart attack")
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
best("SC", "heart attack")
source("best.R")
best <- function(state, outcome) {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validNames = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validNames) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validNames)]
## Return hospital name in that state with lowest 30-day death
data.state <- data[data$State==state,]
## rate
}
best("SC", "heart attack")
best("TX", "heart attack")
getwd()
head(texas)
best("SC", "heart attack")
data.state
rankhospital("MN", "heart attack", 5000)
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
best("TX", "heart attack")
best("SC", "heart attack")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
