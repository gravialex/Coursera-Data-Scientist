complete <- function (directory, id = 1:332) {
data = numeric()
for (i in id) {
filename <- paste( directory, "/" , formatC(i, width = 3, flag = "0"), ".csv", sep="")
filedata <- read.csv(filename)
data <- c(data , sum(complete.cases(filedata)))
}
return(data.frame(id, nobs=data))
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
library(datasets)
data(iris)
head(iris)
dim(iris)
(iris)
str(iris)
iris_v <- iris [iris$Species == "virginica" ,]
str(iris_v)
dim(iris_v)
summary (iris_v)
summary(iris)
round (mean (iris_v$Sepal.Length), digits = 0)
mean (iris_v$Sepal.Length)
iris[, 1:4]
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 3, mean)
apply(iris, 3, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris_v, 2, mean)
iris[, 1:4]
iris
apply(iris[, 1:4], 3, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, sum)
apply(iris[, 1:4], 2, mean)
summary(iris)
library(datasets)
data(mtcars)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
NEI <- readRDS("summarySCC_PM25.rds")
NEI <- readRDS("D:\Study\Coursera\Exploratory Data Analysis\Course Project 2\summarySCC_PM25.rds")
NEI <- readRDS("D:/Study/Coursera/Exploratory Data Analysis/Course Project 2/summarySCC_PM25.rds")
SCC <- readRDS("D:/Study/Coursera/Exploratory Data Analysis/Course Project 2/Source_Classification_Code.rds")
summary(NEI)
dim(NEI)
head(NEI)
head(NEI$year)
summary(NEI$year)
dim(NEI$year)
str(NEI$year)
unique(NEI$year)
aggTotals <- aggregate(Emissions ~ year,NEI, sum)
aggTotals
png('plot1.png')
barplot(
(aggTotals$Emissions)/10^6,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
dev.off()
barplot(
(aggTotals$Emissions)/10^6,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
barplot(
(aggTotals$Emissions)/10^6,  width = 1, space = NULL,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
barplot(
(aggTotals$Emissions)/10^6,  ## width = 1, space = NULL,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
barplot(
(aggTotals$Emissions)/10^6,  width = 1, space = 3,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
barplot(
(aggTotals$Emissions)/10^6,  width = 15, space = 3,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
barplot(
(aggTotals$Emissions)/10^6,
names.arg=aggTotals$year,
xlab="Year", axes = TRUE,
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
barplot(
(aggTotals$Emissions)/10^6,
names.arg=aggTotals$year,
xlab="Year", axes = FALSE,
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
barplot(
(aggTotals$Emissions)/10^6,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
BaltimoreNEI  <- NEI[NEI$fips=="24510", ]
BaltimoreNEI
barplot(
aggTotals$Emissions,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (Tons)",
main="Total PM2.5 Emissions From Baltimore City Sources"
)
barplot(
aggTotals$Emissions,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (Tons)",
main="Total PM2.5 Emissions From Baltimore City Sources"
)
aggTotals <- aggregate(Emissions ~ year,BaltimoreNEI, sum)
barplot(
aggTotals$Emissions,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (Tons)",
main="Total PM2.5 Emissions From Baltimore City Sources"
)
BaltimoreNEI
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(BaltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
guides(fill=FALSE) +
facet_grid(.~type,scales = "free",space="free") +
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("Total PM2.5 Emissions From Baltimore City Sources by Type"))
print(g)
factor(year)
aes(factor(year),Emissions,fill=type))
aes(factor(year),Emissions,fill=type)
g <- ggplot(BaltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
guides(fill=FALSE) +
facet_grid(.~type,scales = "free",space="free") +
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("Total PM2.5 Emissions From Baltimore City Sources by Type"))
print(g)
factor(year)
year
Emissions
g <- ggplot(BaltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
guides(fill=FALSE) +
facet_grid(.~type,scales = "free",space="free") +
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("Total PM2.5 Emissions From Baltimore City Sources by Type"))
print(g)
coalMatches  <- grepl("coal", NEI_SCC$Short.Name, ignore.case=TRUE)
subsetNEISCC <- NEI_SCC[coalMatches, ]
aggTotalByYear <- aggregate(Emissions ~ year, subsetNEISCC, sum)
NEI_SCC <- merge(NEI, SCC, by="SCC")
head(NEI_SCC)
vehicles <- grepl("vehicle", NEI_SCC$SCC.Level.Two, ignore.case=TRUE)
vehiclesSCC <- NEI_SCC[vehicles,]$SCC
vehiclesNEI <- NEI[NEI$SCC %in% vehiclesSCC,]
g <- ggplot(baltimoreVehiclesNEI,aes( factor(year), Emissions )) +
geom_bar(stat="identity",fill="grey",width=0.75) +
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
print(g)
baltimoreVehiclesNEI <- vehiclesNEI[vehiclesNEI$fips=="24510",]
g <- ggplot(baltimoreVehiclesNEI,aes( factor(year), Emissions )) +
geom_bar(stat="identity",fill="grey",width=0.75) +
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
print(g)
g <- ggplot(baltimoreVehiclesNEI,aes( factor(year), Emissions )) +
geom_bar(stat="identity",fill="grey",width=0.75) +
facet_grid(.~type,scales = "free",space="free") +
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
print(g)
vehiclesNEI[vehiclesNEI$fips=="24510",]
baltimoreVehiclesNEI$city
g <- ggplot(bothNEI,aes( factor(year), Emissions ,fill=city )) +
geom_bar(stat="identity",fill="grey",width=0.75) +
facet_grid(scales="free", space="free", .~city) +
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("Motor Vehicle Source Emissions in Baltimore & LA from 1999-2008"))
print(g)
baltimoreVehiclesNEI <- vehiclesNEI[vehiclesNEI$fips=="24510",]
baltimoreVehiclesNEI$city <- "Baltimore City"
# Subset the vehicles NEI data to LA's fip
vehiclesLANEI <- vehiclesNEI[vehiclesNEI$fips=="06037",]
vehiclesLANEI$city <- "Los Angeles County"
# Combine the two subsets with city name into one data frame
bothNEI <- rbind(baltimoreVehiclesNEI,vehiclesLANEI)
g <- ggplot(bothNEI,aes( factor(year), Emissions ,fill=city )) +
geom_bar(stat="identity",fill="grey",width=0.75) +
facet_grid(scales="free", space="free", .~city) +
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("Motor Vehicle Source Emissions in Baltimore & LA from 1999-2008"))
print(g)
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot(x, y, lwd = 3,frame = FALSE, type = "l")
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
table(rpois(100, 5))
table(rpois(100, 5))
table(rpois(100, 5))
table(rpois(100, 5))
table(rpois(100, 5))
plot(x, y, lwd = 3,frame = FALSE, type = "l")
ECHO=TRUE
set.seed(3333)
lambda = 0.2
exponentials = 40
simulations_number <- 1000
simulated_exponentials <- replicate(simulations_number, rexp(exponentials, lambda))
means <- apply(simulated_exponentials, 2, mean)
hist(means)
mean_actual <- mean(means)
mean_theory <- lambda^-1
abs(mean_actual - mean_theory)
hist(means, col="orange", main="Exponential Function Simulations", breaks=20)
abline(v=mean_actual, lwd="4", col="red")
text(7, 80, paste("Actual mean = ", mean_actual, "\n Theoretical mean = " , mean_theory ), col="red")
variance_actual <- var(means)
variance_actual
means
variance_theory <- (lambda * sqrt(exponentials))^-2
abs(variance_actual-variance_theory)
library(ggplot2)
ggplot(data.frame(y=means), aes(x=y)) +
geom_histogram(aes(y=..density..), binwidth=0.2, fill="orange", color="black") +
stat_function(fun=dnorm, arg=list(mean=lambda^-1,
sd=(lambda*sqrt(exponentials))^-1),
size=1, color="red") +
labs(title="Distribution  of the Simulations", x="Simulation Mean")
library(datasets)
data <- ToothGrowth
class(data)
summary(data)
str(data)
head(data)
ToothGrowth
library(ggplot2)
levels(data$supp) <- c("Orange Juice", "Ascorbic Acid")
ggplot(data, aes(x=factor(dose), y=len)) +
facet_grid(.~supp) +
geom_boxplot(aes(fill = supp), show_guide = FALSE) +
labs(title="Tooth length  by dose for each type of supplement",
x="Dose (mg/day)",
y="Tooth Length")
h1<-t.test(len ~ supp, data )
h1$conf.int
h1$p.value
t.test(len ~ supp, data )
t.test(len ~ supp, subset(data, dose == 0.5))
h2$p.value
h2<-t.test(len ~ supp, subset(data, dose == 0.5))
h2$conf.int
h2$p.value
t.test(len ~ supp, subset(data, dose == 0.5))
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
examinations
plot(examinations)
examinations$baseline
examinations$week2
t.test(x = examinations$baseline, y = examinations$week2, alt = "two.sided", paired = TRUE)
test <- t.test(x = examinations$baseline, y = examinations$week2, alt = "two.sided", paired = TRUE)
pval <- test$p.value
round(pval,3)
n <- 9
m <- 1100
q <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = m + c(-1, 1) * qt(quantile, df=n-1) * q / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
n <- 100 #subject
m <- 0.01# m^3 brain volume loss mean
q <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(n=n, delta=m, sd=q , sig.level=p, type="one.sample", alt="one.sided")$power
round(pow, 2)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
#
library(datasets)
data(iris)
iris_v <- iris [iris$Species == "virginica" ,]
summary (iris_v)
iris_v
round (mean (iris_v$Sepal.Length), digits = 0)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
str(str)
